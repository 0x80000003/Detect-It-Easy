function detect(){if(PE.isDll()){var e=PE.isLibraryPresentExp(/perl(5)_?(\d\d*)/i)
return e&&(bDetected=!0,sVersion=e[1]+"."+e[2],_setLang("Perl",bDetected)),PE.isExportFunctionPresentExp("Perl_sv_bless|perl_parse")?(bDetected=!0,sVersion="v"+getPerlVersion(),_setLang("Perl",bDetected),_setResult("library","Perl Runtime",sVersion,"")):result()}}function getPerlVersion(){const e=["'erl5'..'.dll'","'erl5'....'.dll'","'erl5_'..'.dll'","'erl5_'....'.dll'"]
for(var r=PE.getExportSection(),t=String(),n=-1,i=0;i<e.length&&!((n=PE.findSignature(PE.section[r].FileOffset,PE.getSize(),e[i]))>-1);++i);if(n>0){var l=PE.getString(n,12)
if(!(l=l.match(/(5)_?(\d\d*)/)))return t
t=l[1]+"."+l[2]
var s=findPatchVersion(Number(l[2])>9?"'5.' .. .. '.' .. ":"'5.' .. '.' ..")
s>0&&(t+="."+s)}return t}function findPatchVersion(e){for(var r=0,t=PE.getSize(),n=0,i=-1;-1!=(i=PE.findSignature(r,t,e));){var l=PE.getString(i,12)
r=i+l.length,(l=l.match(/5\.\d\d*\.(\d\d*)/))&&l[1]>n&&(n=l[1])}return n}init("library","Perl5 xs")
